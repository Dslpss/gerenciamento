rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções utilitárias
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Regras para usuários
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Regras para despesas
    match /expenses/{expenseId} {
      allow read: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuth() && resource.data.userId == request.auth.uid;

      // Validação adicional para criação/atualização
      function isValidExpense() {
        let expense = request.resource.data;
        return expense.amount is number 
          && expense.amount > 0
          && expense.description is string
          && expense.description.size() > 0
          && expense.category is string;
      }

      // Aplicar validação nas operações de escrita
      allow create: if isAuth() 
        && request.resource.data.userId == request.auth.uid 
        && isValidExpense();
      
      allow update: if isAuth() 
        && resource.data.userId == request.auth.uid 
        && isValidExpense();
    }
    
    // Regras para salários
    match /salaries/{userId} {
      allow read: if isOwner(userId);
      
      // Validação para dados de salário
      function isValidSalary() {
        let salary = request.resource.data;
        return salary.defaultSalary is number 
          && salary.defaultSalary >= 0
          && salary.monthlySalaries is map;
      }
      
      allow write: if isOwner(userId) && isValidSalary();
    }
    
    // Regras para histórico de salários
    match /salaryHistory/{entryId} {
      allow read: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.amount is number
        && request.resource.data.date is timestamp;
      allow delete: if isAuth() && resource.data.userId == request.auth.uid;
    }

    // Negar acesso a todos os outros documentos
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
